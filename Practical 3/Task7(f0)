/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Primary program execution file
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is subject to licensing terms in the LICENSE file.
  * If the LICENSE is missing, it is provided "AS-IS".
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdint.h>

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* Additional includes (if required) can be added here */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* Place any typedefs here if necessary */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MAX_ITER 100   // Maximum iterations for Mandelbrot computation
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* Define any macros if needed */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
// Timing and performance measurement variables
volatile uint32_t start_time = 0;          // Time at the start of computation
volatile uint32_t end_time = 0;            // Time at the end of computation
volatile uint32_t execution_time[5] = {0}; // Stores execution time for each resolution
volatile uint64_t checksum[5] = {0};       // Stores computed Mandelbrot sums

// Arrays storing image dimensions for benchmarking
uint64_t width[5]  = {128, 160, 192, 224, 256};
uint64_t height[5] = {128, 160, 192, 224, 256};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
// Function prototype for fixed-point Mandelbrot calculation
uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Additional user-defined functions can go here */
/* USER CODE END 0 */

/**
  * @brief  Application entry point
  * @retval int
  */
int main(void)
{
    /* Initialize HAL library */
    HAL_Init();

    /* Configure the system clocks */
    SystemClock_Config();

    /* Initialize GPIO for LED indicators */
    MX_GPIO_Init();

    /* Loop through each image resolution and compute Mandelbrot set */
    for (int i = 0; i < 5; i++)
    {
        // LED0 ON: computation starting
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

        // Capture the current tick count before computation
        start_time = HAL_GetTick();

        // Compute Mandelbrot set using fixed-point arithmetic
        checksum[i] = calculate_mandelbrot_fixed_point_arithmetic(width[i], height[i], MAX_ITER);
        // Optional: Use double-precision version instead
        // checksum[i] = calculate_mandelbrot_double(width[i], height[i], MAX_ITER);

        // Capture the tick count after computation
        end_time = HAL_GetTick();

        // Compute total elapsed time for this resolution
        execution_time[i] = end_time - start_time;

        // LED0 OFF, LED1 ON: indicate computation finished
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

        // Keep LED1 ON for 1 second to signal completion
        HAL_Delay(1000);

        // Turn LED1 OFF
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
    }

    // Enter infinite loop after all computations
    while (1)
    {
    }
}

/* System Clock Configuration */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    // Initialize HSI oscillator and PLL parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    // Configure AHB and APB bus clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
    {
        Error_Handler();
    }
}

/* GPIO Initialization */
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // Enable GPIO ports
    __HAL_RCC_GPIOF_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();

    // Reset all LED pins initially
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

    // Configure PB0-PB7 as output pins for LED control
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                        |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

/* USER CODE BEGIN 4 */
/**
 * @brief Calculate the Mandelbrot set using fixed-point arithmetic.
 * @param width     : Width of the image in pixels
 * @param height    : Height of the image in pixels
 * @param max_iterations : Maximum number of iterations per pixel
 * @retval Computed checksum for the entire image
 */
uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations)
{
    uint64_t mandelbrot_checksum = 0;
    int32_t scale_factor = 10000; // Scale factor for fixed-point math
    int16_t x0, y0, xi, yi, iteration, xi_temp;

    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            // Map pixel coordinates into fixed-point coordinate space
            x0 = (x * scale_factor / width) * 35 / 10 - 25 * scale_factor / 10;
            y0 = (y * scale_factor / height) * 2 - scale_factor;

            xi = yi = iteration = 0;

            // Iteratively compute Mandelbrot value
            while ((iteration < max_iterations) && (xi*xi + yi*yi <= 4*scale_factor*scale_factor))
            {
                xi_temp = (xi*xi - yi*yi) / scale_factor;
                yi = (2 * xi * yi) / scale_factor + y0;
                xi = xi_temp + x0;
                iteration++;
            }

            mandelbrot_checksum += iteration;
        }
    }

    return mandelbrot_checksum;
}
/* USER CODE END 4 */

void Error_Handler(void)
{
    __disable_irq();
    while (1)
    {
        // Infinite loop indicates error state
    }
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
    // User can implement reporting of file and line for debugging
}
#endif
