/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main application code for Mandelbrot computation with tiled processing
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This code is provided under the LICENSE terms located in the root directory.
  * If no LICENSE file is included, the software is provided "AS-IS".
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include "stm32f0xx.h"
//#include "lcd_stm32f0.c" // optional LCD display
#include "stm32f0xx_hal.h"
#include "stm32f0xx_hal_rcc.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* Additional typedefs can be added here if necessary */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MAX_ITER 100  // Maximum iterations for Mandelbrot calculation
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* Place custom macros here if needed */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
// Variables for benchmarking and profiling Mandelbrot computation
volatile uint32_t start_time = 0;   // Store starting timestamp
volatile uint32_t end_time = 0;     // Store ending timestamp
volatile uint32_t execution_time[5]; // Execution duration per resolution
volatile uint64_t checksum[5];      // Accumulated iteration counts

// Arrays for various image resolutions to be processed
const int widths[]  = {128, 256, 512, 800, 1280, 1920};
const int heights[] = {128, 256, 512, 600,  720, 1080};
#define NUM_SIZES (sizeof(widths)/sizeof(widths[0]))  // Number of resolution sizes

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
// Function prototypes for Mandelbrot computation variants
uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
uint64_t calculate_mandelbrot_tiled(int width, int height, int max_iterations, int chunk_height);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Any additional initialization routines can be placed here */
/* USER CODE END 0 */

/**
  * @brief  Main program execution.
  * @retval int
  */
int main(void)
{
    /* Initialize HAL library and system */
    HAL_Init();

    /* Configure system clocks */
    SystemClock_Config();

    /* Initialize GPIO for LED indicators */
    MX_GPIO_Init();

    /* USER CODE BEGIN 2 */
    // Additional initialization can be placed here
    /* USER CODE END 2 */

    /* Infinite loop for Mandelbrot computation at multiple resolutions */
    while (1)
    {
        // LED0 ON: Processing started
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

        // Loop through each defined resolution
        for (int i = 0; i < NUM_SIZES; i++)
        {
            int w = widths[i];
            int h = heights[i];
            int chunk_height = 800; // Process rows in chunks to reduce memory footprint
            uint32_t pixels = (uint32_t)w * (uint32_t)h;

            // Record start time
            start_time = HAL_GetTick();

            // Compute Mandelbrot set using tiled approach
            uint64_t cs_fixed = calculate_mandelbrot_tiled(w, h, MAX_ITER, chunk_height);

            // Record end time and calculate execution duration
            end_time = HAL_GetTick();
            execution_time[i] = end_time - start_time;

            // Store checksum result for validation
            checksum[i] = cs_fixed;

            // Small delay to allow hardware signals to update
            HAL_Delay(20);

            // LED indication: LED0 OFF, LED1 ON for visual feedback
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

            // Keep LED1 ON for 2 seconds to indicate completion
            HAL_Delay(2000);

            // Turn off LED1
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
        }
    }
}

/**
  * @brief System Clock Configuration
  */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    // Configure HSI oscillator and enable PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    // Configure CPU, AHB, and APB clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
    {
        Error_Handler();
    }
}

/**
  * @brief GPIO Initialization Function
  */
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // Enable GPIO clocks
    __HAL_RCC_GPIOF_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();

    // Initialize LED pins (PB0-PB7) to LOW
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                              |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

    // Configure LED pins as push-pull outputs
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                        |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

/* USER CODE BEGIN 4 */

/**
 * @brief Compute Mandelbrot using fixed-point arithmetic
 */
uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations)
{
    uint64_t mandelbrot_checksum = 0;
    int64_t scale_factor = 1000000;
    int64_t x0, y0, xi, yi, iteration, xi_temp;

    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            x0 = (x * scale_factor / width) * 35 / 10 - 25 * scale_factor / 10;
            y0 = (y * scale_factor / height) * 2 - scale_factor;

            xi = yi = iteration = 0;

            while ((iteration < max_iterations) && (xi*xi + yi*yi <= 4*scale_factor*scale_factor))
            {
                xi_temp = (xi*xi - yi*yi) / scale_factor;
                yi = (2*xi*yi) / scale_factor + y0;
                xi = xi_temp + x0;
                iteration++;
            }

            mandelbrot_checksum += iteration;
        }
    }

    return mandelbrot_checksum;
}

/**
 * @brief Compute Mandelbrot using double-precision floating point
 */
uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations)
{
    uint64_t mandelbrot_checksum = 0;
    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            double x0 = ((double)x / width)*3.5 - 2.5;
            double y0 = ((double)y / height)*2.0 - 1.0;
            double xi = 0, yi = 0;
            int iter = 0;

            while (iter < max_iterations)
            {
                double xi2 = xi*xi;
                double yi2 = yi*yi;
                if (xi2 + yi2 > 4.0) break;

                double temp = xi2 - yi2;
                yi = 2.0*xi*yi + y0;
                xi = temp + x0;
                iter++;
            }

            mandelbrot_checksum += iter;
        }
    }
    return mandelbrot_checksum;
}

/**
 * @brief Compute Mandelbrot using tiled processing
 */
uint64_t calculate_mandelbrot_tiled(int width, int height, int max_iterations, int chunk_height)
{
    uint64_t total_checksum = 0;
    const double x_step = 3.5 / width;
    const double y_step = 2.0 / height;

    for (int y_chunk_start = 0; y_chunk_start < height; y_chunk_start += chunk_height)
    {
        int y_chunk_end = y_chunk_start + chunk_height;
        if (y_chunk_end > height) y_chunk_end = height; // Handle last partial chunk

        for (int y = y_chunk_start; y < y_chunk_end; y++)
        {
            double y0 = y * y_step - 1.0;
            for (int x = 0; x < width; x++)
            {
                double x0 = x * x_step - 2.5;
                double xi = 0.0, yi = 0.0;
                int iteration = 0;

                while (iteration < max_iterations)
                {
                    double xi_sq = xi*xi;
                    double yi_sq = yi*yi;
                    if (xi_sq + yi_sq > 4.0) break;

                    double yi_new = 2.0*xi*yi + y0;
                    double xi_new = xi_sq - yi_sq + x0;
                    xi = xi_new;
                    yi = yi_new;

                    iteration++;
                }

                total_checksum += (uint64_t)iteration;
            }
        }
    }

    return total_checksum;
}

/* USER CODE END 4 */

/**
 * @brief Error handler in case of HAL failure
 */
void Error_Handler(void)
{
    __disable_irq();
    while(1) {}
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
    // User can add debug reporting here if desired
}
#endif
