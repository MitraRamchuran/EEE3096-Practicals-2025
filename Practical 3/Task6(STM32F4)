/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Primary application source
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This firmware is distributed under the license terms available in the LICENSE
  * file located in the root folder of this software project.
  * If a LICENSE file is absent, the program is delivered AS-IS without warranty.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdint.h>
#include "stm32f4xx.h"
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_rcc.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
// Additional includes may be added here if required later
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// Custom data structures can be defined here if necessary
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
// No extra defines at the moment
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
// Space left for macros if needed
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

// Timing and performance variables
#define MAX_ITER 100   // iteration cap per pixel

volatile uint32_t start_time = 0;
volatile uint32_t end_time   = 0;
volatile uint32_t execution_time;
volatile uint64_t checksum[5];

// Image sizes to benchmark
uint64_t width[5]  = {128, 160, 192, 224, 256};
uint64_t height[5] = {128, 160, 192, 224, 256};

/* USER CODE END PV */

/* Function prototypes -------------------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);

/* USER CODE BEGIN PFP */
// Prototype section for extra user functions if added later
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
// No special user startup code yet
/* USER CODE END 0 */

/**
  * @brief  Main entry for firmware execution
  * @retval int
  */
int main(void)
{
  /* Reset peripherals, initialize HAL, and set up system tick */
  HAL_Init();

  /* Setup system clock tree */
  SystemClock_Config();

  /* Initialize GPIO ports/pins */
  MX_GPIO_Init();

  /* Benchmark loop for Mandelbrot execution */
  while (1)
  {
      start_time = HAL_GetTick();   // record time before calculations begin

      for (int i = 0; i < 5; i++) {
          // Switch on LED0 to indicate work started
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

          // Execute Mandelbrot calculation for current resolution
          checksum[i] = calculate_mandelbrot_fixed_point_arithmetic(width[i], height[i], MAX_ITER);
          // Alternative approach:
          // checksum[i] = calculate_mandelbrot_double(width[i], height[i], MAX_ITER);

          // LEDs to mark task completion
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

          // Leave LED lit for visibility (1 second)
          HAL_Delay(1000);

          // Switch off after delay
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      }

      // Time captured after loop finishes
      end_time = HAL_GetTick();

      // Compute total elapsed time
      execution_time = end_time - start_time;
  }
}

/**
  * @brief Setup system clock configuration (PLL, HCLK, PCLK)
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  // Enable power controller and voltage scaling
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  // Configure HSE and PLL parameters
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState            = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM            = 15;
  RCC_OscInitStruct.PLL.PLLN            = 144;
  RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ            = 2;
  RCC_OscInitStruct.PLL.PLLR            = 2;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
      Error_Handler();
  }

  // Bus clocks setup
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
                                     RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
      Error_Handler();
  }
}

/**
  * @brief Setup GPIO pins for LED output
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  // Enable clocks for required GPIO ports
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  // Reset output pins on GPIOB
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |
                           GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7,
                           GPIO_PIN_RESET);

  // Configure GPIOB pins as push-pull outputs
  GPIO_InitStruct.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |
                          GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

/* USER CODE BEGIN 4 */

/**
  * @brief Mandelbrot implementation using fixed-point math
  */
uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations)
{
    uint64_t mandelbrot_checksum = 0;

    int32_t scale_factor = 1000;
    int16_t x0, y0, xi, yi, iteration, xi_temp;

    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            // Map pixel coordinate to complex plane
            x0 = (x * scale_factor / width) * 35 / 10 - 25 * scale_factor / 10;
            y0 = (y * scale_factor / height) * 2 - scale_factor;

            xi = 0;
            yi = 0;
            iteration = 0;

            while ((iteration < max_iterations) && (xi * xi + yi * yi <= 4 * scale_factor * scale_factor)) {
                xi_temp = (xi * xi - yi * yi) / scale_factor;
                yi      = (2 * xi * yi) / scale_factor + y0;
                xi      = xi_temp + x0;
                iteration++;
            }
            mandelbrot_checksum += iteration;
        }
    }
    return mandelbrot_checksum;
}

/**
  * @brief Mandelbrot calculation using double precision
  */
uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations)
{
    uint64_t mandelbrot_sum = 0;
    double x0, y0, xi, yi, iteration, temp;

    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            x0 = ((double)x / (double)width) * 3.5 - 2.5;
            y0 = ((double)y / (double)height) * 2 - 1;
            xi = yi = iteration = 0;

            while ((iteration < max_iterations) && (xi*xi + yi*yi <= 4)) {
                temp = xi*xi - yi*yi;
                yi   = 2*xi*yi + y0;
                xi   = temp + x0;
                iteration++;
            }
            mandelbrot_sum += iteration;
        }
    }
    return mandelbrot_sum;
}
/* USER CODE END 4 */

/**
  * @brief Error handling routine
  * @retval None
  */
void Error_Handler(void)
{
  __disable_irq();
  while (1) { }
}

#ifdef USE_FULL_ASSERT
/**
  * @brief Report file name and line number on assert failure
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  // Optional: implement logging or debugging output
}
#endif /* USE_FULL_ASSERT */
