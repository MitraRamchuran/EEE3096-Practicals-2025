/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body for Practical 3 - Task 1 (STM32F4)
  ******************************************************************************
  * @attention
  * Adapted from Practical 1B Mandelbrot implementation.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include "stm32f4xx.h"   // F4 family
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define MAX_ITER 100
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
uint32_t start_time = 0;
uint32_t end_time = 0;

uint32_t execution_time_fp[5] = {0};
uint32_t execution_time_d[5]  = {0};
uint64_t checksum_fp[5]       = {0};
uint64_t checksum_d[5]        = {0};

int widths[]  = {128, 160, 192, 224, 256};
int heights[] = {128, 160, 192, 224, 256};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void)
{
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // LED0 ON (start signal)

  for (int i = 0; i < 5; i++) {
      // --- Fixed-point run ---
      start_time = HAL_GetTick();
      checksum_fp[i] = calculate_mandelbrot_fixed_point_arithmetic(widths[i], heights[i], MAX_ITER);
      end_time = HAL_GetTick();
      execution_time_fp[i] = end_time - start_time;

      // --- Double precision run ---
      start_time = HAL_GetTick();
      checksum_d[i] = calculate_mandelbrot_double(widths[i], heights[i], MAX_ITER);
      end_time = HAL_GetTick();
      execution_time_d[i] = end_time - start_time;

      HAL_Delay(500); // pause for observation
  }

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // LED1 ON (end signal)
  HAL_Delay(1000);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET); // LEDs OFF
  /* USER CODE END 2 */

  while (1)
  {
    // Idle loop
  }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /* Configure clock for STM32F4 at 120 MHz (as per prac setup) */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 240;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);

  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

/* USER CODE BEGIN 4 */
uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations) {
    uint64_t mandelbrot_sum = 0;
    const int32_t SCALE = 1000000; // 1e6 for fixed-point

    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            int32_t x0 = ((int64_t)x * SCALE / width) * 35 / 10 - (SCALE * 25 / 10);
            int32_t y0 = ((int64_t)y * SCALE / height) * 20 / 10 - (SCALE * 10 / 10);

            int32_t xi = 0, yi = 0;
            int iteration = 0;

            while (iteration < max_iterations) {
                int64_t xi2 = (int64_t)xi * xi / SCALE;
                int64_t yi2 = (int64_t)yi * yi / SCALE;
                if (xi2 + yi2 > SCALE * 4) break;

                int64_t temp = xi2 - yi2;
                yi = (int64_t)2 * xi * yi / SCALE + y0;
                xi = temp + x0;

                iteration++;
            }
            mandelbrot_sum += iteration;
        }
    }
    return mandelbrot_sum;
}

uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations) {
    uint64_t mandelbrot_sum = 0;

    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            double x0 = ((double)x / width) * 3.5 - 2.5;
            double y0 = ((double)y / height) * 2.0 - 1.0;

            double xi = 0.0, yi = 0.0;
            int iteration = 0;

            while (iteration < max_iterations) {
                double xi2 = xi * xi;
                double yi2 = yi * yi;
                if (xi2 + yi2 > 4.0) break;

                double temp = xi2 - yi2;
                yi = 2.0 * xi * yi + y0;
                xi = temp + x0;

                iteration++;
            }
            mandelbrot_sum += iteration;
        }
    }
    return mandelbrot_sum;
}
/* USER CODE END 4 */

void Error_Handler(void)
{
  __disable_irq();
  while (1) {}
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
  /* Optional debug print */
}
#endif /* USE_FULL_ASSERT */
