/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Mandelbrot performance benchmark on STM32F4
  ******************************************************************************
  * @attention
  *
  * Â© 2025 STMicroelectronics. All rights reserved.
  *
  * Licensed under the terms included in the LICENSE file located in the
  * root directory of this project. If a LICENSE file is missing,
  * this code is distributed AS-IS without warranty.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <stdio.h>
#include "stm32f4xx.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// No custom typedefs needed here, keep default structures
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define MAX_ITER        100
#define NUM_TESTS       5
#define CPU_FREQ_HZ     120000000UL   /* System clock configured to 120 MHz */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
// Macros not required for now
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

// Benchmark timers and counters
volatile uint32_t start_ms = 0;
volatile uint32_t end_ms = 0;
volatile uint32_t elapsed_ms = 0;

volatile uint32_t start_cycles = 0;
volatile uint32_t end_cycles = 0;
volatile uint32_t elapsed_cycles = 0;

/* Square image sizes for testing */
const int image_sizes[NUM_TESTS] = {128, 160, 192, 224, 256};

/* Optional widescreen resolutions */
const int widths[]  = {128, 256, 512, 800, 1280, 1920};
const int heights[] = {128, 256, 512, 600,  720, 1080};
#define NUM_SIZES (sizeof(widths)/sizeof(widths[0]))

/* Storage for results */
volatile uint32_t exec_time_fixed_ms[NUM_TESTS] = {0};
volatile uint32_t exec_time_double_ms[NUM_TESTS] = {0};
volatile uint32_t exec_cycles_fixed[NUM_TESTS] = {0};
volatile uint32_t exec_cycles_double[NUM_TESTS] = {0};
volatile uint64_t checksum_fixed[NUM_TESTS] = {0};
volatile uint64_t checksum_double[NUM_TESTS] = {0};
volatile uint32_t checksum[NUM_TESTS] = {0};
volatile uint32_t execution_time[NUM_TESTS] = {0};

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

// Mandelbrot calculation function prototypes
uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);

// Cortex-M DWT helpers
static inline void dwt_enable_cycle_counter(void);
static inline uint32_t dwt_get_cycle_count(void);

// Utility: derive pixels per second
static inline uint32_t compute_pixels_per_sec(uint32_t pixels, uint32_t cycles);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Enable DWT cycle counter (Cortex-M4 only) */
static inline void dwt_enable_cycle_counter(void)
{
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  }
  DWT->CYCCNT = 0;                     // reset counter
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // enable counting
}

/* Get current cycle count */
static inline uint32_t dwt_get_cycle_count(void)
{
  return DWT->CYCCNT;
}

/* Convert cycles into throughput (pixels/s) */
static inline uint32_t compute_pixels_per_sec(uint32_t pixels, uint32_t cycles)
{
  if (cycles == 0) return 0;
  uint64_t val = (uint64_t)pixels * (uint64_t)CPU_FREQ_HZ;
  val /= (uint64_t)cycles;
  return (val > 0xFFFFFFFFULL) ? 0xFFFFFFFFU : (uint32_t)val;
}

/* Mandelbrot implementation using Q16.16 fixed-point arithmetic */
uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations)
{
    uint64_t mandelbrot_sum = 0;

    const int32_t scale_shift = 16;      
    const int32_t scale_factor = (1 << scale_shift);
    const int32_t escape_limit = 4 << scale_shift;

    int32_t x_step = (int32_t)((3.5 * (double)scale_factor) / (double)width + 0.5);
    int32_t y_step = (int32_t)((2.0 * (double)scale_factor) / (double)height + 0.5);
    int32_t x_offset = - (int32_t)(2.5 * (double)scale_factor + 0.5);
    int32_t y_offset = - (int32_t)(1.0 * (double)scale_factor + 0.5);

    for (int y = 0; y < height; y++) {
        int32_t y0 = y * y_step + y_offset;
        for (int x = 0; x < width; x++) {
            int32_t x0 = x * x_step + x_offset;
            int32_t xi = 0;
            int32_t yi = 0;
            int iteration = 0;

            while (iteration < max_iterations) {
                int64_t xi_sq = ((int64_t)xi * (int64_t)xi) >> scale_shift;
                int64_t yi_sq = ((int64_t)yi * (int64_t)yi) >> scale_shift;

                if ((xi_sq + yi_sq) > (int64_t)escape_limit) break;

                int32_t xi_yi = (int32_t)(((int64_t)xi * (int64_t)yi) >> (scale_shift - 1));
                int32_t xi_new = (int32_t)(xi_sq - yi_sq) + x0;
                int32_t yi_new = xi_yi + y0;

                xi = xi_new;
                yi = yi_new;
                iteration++;
            }

            mandelbrot_sum += (uint64_t)iteration;
        }
    }
    return mandelbrot_sum;
}

/* Mandelbrot with double-precision floating point */
uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations)
{
    uint64_t mandelbrot_sum = 0;

    const double x_step = 3.5 / (double)width;
    const double y_step = 2.0 / (double)height;

    for (int y = 0; y < height; y++) {
        double y0 = y * y_step - 1.0;
        for (int x = 0; x < width; x++) {
            double x0 = x * x_step - 2.5;
            double xi = 0.0, yi = 0.0;
            int iteration = 0;

            while (iteration < max_iterations) {
                double xi_sq = xi * xi;
                double yi_sq = yi * yi;
                if ((xi_sq + yi_sq) > 4.0) break;

                double yi_new = 2.0 * xi * yi + y0;
                double xi_new = xi_sq - yi_sq + x0;

                xi = xi_new;
                yi = yi_new;
                iteration++;
            }
            mandelbrot_sum += (uint64_t)iteration;
        }
    }
    return mandelbrot_sum;
}

/* Tiled Mandelbrot: processes image in vertical chunks */
uint64_t calculate_mandelbrot_tiled(int width, int height, int max_iterations, int chunk_height)
{
    uint64_t total_checksum = 0;

    const double x_step = 3.5 / (double)width;
    const double y_step = 2.0 / (double)height;

    for (int y_chunk_start = 0; y_chunk_start < height; y_chunk_start += chunk_height) {
        int y_chunk_end = y_chunk_start + chunk_height;
        if (y_chunk_end > height) y_chunk_end = height;

        for (int y = y_chunk_start; y < y_chunk_end; y++) {
            double y0 = y * y_step - 1.0;
            for (int x = 0; x < width; x++) {
                double x0 = x * x_step - 2.5;
                double xi = 0.0, yi = 0.0;
                int iteration = 0;

                while (iteration < max_iterations) {
                    double xi_sq = xi * xi;
                    double yi_sq = yi * yi;
                    if ((xi_sq + yi_sq) > 4.0) break;

                    double yi_new = 2.0 * xi * yi + y0;
                    double xi_new = xi_sq - yi_sq + x0;

                    xi = xi_new;
                    yi = yi_new;
                    iteration++;
                }
                total_checksum += (uint64_t)iteration;
            }
        }
    }

    return total_checksum;
}

/* USER CODE END 0 */

/**
  * @brief  Program entry point
  * @retval int
  */
int main(void)
{
  HAL_Init();               // Initialize HAL and reset peripherals
  SystemClock_Config();     // Configure the system clock
  MX_GPIO_Init();           // Initialize GPIOs

  while (1)
  {
    /* Turn on LED0 as a "benchmark running" signal */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

    /* Execute benchmarks for each test size */
    for (int i = 0; i < NUM_TESTS; i++) {
      int sz = image_sizes[i];
      uint32_t pixels = (uint32_t)sz * (uint32_t)sz;

      /* Run fixed-point Mandelbrot */
      start_ms = HAL_GetTick();
      start_cycles = dwt_get_cycle_count();

      checksum_fixed[i] = calculate_mandelbrot_fixed_point_arithmetic(sz, sz, MAX_ITER);

      end_cycles = dwt_get_cycle_count();
      end_ms = HAL_GetTick();

      elapsed_cycles = end_cycles - start_cycles;
      elapsed_ms = end_ms - start_ms;

      exec_time_fixed_ms[i] = elapsed_ms;
      exec_cycles_fixed[i] = elapsed_cycles;

      HAL_Delay(20);

      /* Run double-precision Mandelbrot */
      start_ms = HAL_GetTick();
      start_cycles = dwt_get_cycle_count();

      checksum_double[i] = calculate_mandelbrot_double(sz, sz, MAX_ITER);

      end_cycles = dwt_get_cycle_count();
      end_ms = HAL_GetTick();

      elapsed_cycles = end_cycles - start_cycles;
      elapsed_ms = end_ms - start_ms;

      exec_time_double_ms[i] = elapsed_ms;
      exec_cycles_double[i] = elapsed_cycles;

      HAL_Delay(50);
    }

    /* Light up LED1 once done */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

    /* Keep both LEDs lit for 2 seconds */
    HAL_Delay(2000);

    /* Switch LEDs off */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);

    /* Idle wait for observation */
    HAL_Delay(2000);
  }
}

/* Clock tree configuration */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 15;
  RCC_OscInitStruct.PLL.PLLN = 144;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
    Error_Handler();
  }
}

/* GPIO setup */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
                          | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);

  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
                      | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

/* Error handler */
void Error_Handler(void)
{
  __disable_irq();
  while (1) { }
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
  /* Optionally log file/line number */
}
#endif /* USE_FULL_ASSERT */
