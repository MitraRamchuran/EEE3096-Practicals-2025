/*
 * assembly.s
 *
 */

 @ DO NOT EDIT
	.syntax unified
    .text
    .global ASM_Main
    .thumb_func

@ DO NOT EDIT
vectors:
	.word 0x20002000
	.word ASM_Main + 1

@ DO NOT EDIT label ASM_Main
ASM_Main:

	@ Some code is given below for you to start with
	LDR R0, RCC_BASE  		@ Enable clock for GPIOA and B by setting bit 17 and 18 in RCC_AHBENR
	LDR R1, [R0, #0x14]
	LDR R2, AHBENR_GPIOAB	@ AHBENR_GPIOAB is defined under LITERALS at the end of the code
	ORRS R1, R1, R2
	STR R1, [R0, #0x14]

	LDR R0, GPIOA_BASE		@ Enable pull-up resistors for pushbuttons
	MOVS R1, #0b01010101
	STR R1, [R0, #0x0C]
	LDR R1, GPIOB_BASE  	@ Set pins connected to LEDs to outputs
	LDR R2, MODER_OUTPUT
	STR R2, [R1, #0]
	MOVS R2, #0         	@ NOTE: R2 will be dedicated to holding the value on the LEDs

@ TODO: Add code, labels and logic for button checks and LED patterns

main_loop:
    @ Read button states from GPIOA
    LDR R0, GPIOA_BASE
    LDR R3, [R0, #0x10]        @ Read GPIOA_IDR (input data register)

    @ Check SW0 (bit 0) - increment by 1 or 2
    MOVS R4, #1                @ Default increment value (1)
    TST R3, #1                 @ Test SW0 (bit 0)
    BEQ check_sw1
    MOVS R4, #2                @ If SW0 pressed, increment by 2

check_sw1:
    @ Check SW1 (bit 1) - delay timing
    LDR R5, LONG_DELAY_CNT     @ Default delay (0.7s)
    TST R3, #2                 @ Test SW1 (bit 1)
    BEQ check_sw2
    LDR R5, SHORT_DELAY_CNT    @ If SW1 pressed, use short delay (0.3s)

check_sw2:
    @ Check SW2 (bit 2) - set pattern to 0xAA
    TST R3, #4                 @ Test SW2 (bit 2)
    BEQ check_sw3
    MOVS R2, #0xAA             @ If SW2 pressed, set pattern to 0xAA
    B apply_delay

check_sw3:
    @ Check SW3 (bit 3) - freeze pattern
    TST R3, #8                 @ Test SW3 (bit 3)
    BNE apply_delay            @ If SW3 pressed, skip increment (freeze)

    @ Increment the LED pattern
    ADDS R2, R2, R4            @ Add increment value (1 or 2)

apply_delay:
    @ Call delay function with appropriate delay value
    MOV R0, R5                 @ Load delay counter value
    BL delay

    B main_loop

@ Delay subroutine
delay:
    SUBS R0, R0, #1
    BNE delay
    BX LR

write_leds:
    STR R2, [R1, #0x14]        @ Write to GPIOB_ODR (output data register)
    B main_loop

@ LITERALS; DO NOT EDIT
	.align
RCC_BASE: 			.word 0x40021000
AHBENR_GPIOAB: 		.word 0b1100000000000000000
GPIOA_BASE:  		.word 0x48000000
GPIOB_BASE:  		.word 0x48000400
MODER_OUTPUT: 		.word 0x5555

@ TODO: Add your own values for these delays
LONG_DELAY_CNT: 	.word 5600000    @ ~0.7s delay at 16MHz
SHORT_DELAY_CNT: 	.word 2400000    @ ~0.3s delay at 16MHz
