/*
 * assembly.s
 *
 * EEE3095S Practical 2
 * Final version with all tasks implemented.
 * CORRECTED: Replaced Thumb-2 'IT' blocks with Cortex-M0 compatible
 * conditional branches (BNE) to fix assembler errors.
 */
 
 @ DO NOT EDIT
	.syntax unified
    .text
    .global ASM_Main
    .thumb_func

@ DO NOT EDIT
vectors:
	.word 0x20002000
	.word ASM_Main + 1

@ DO NOT EDIT label ASM_Main
ASM_Main:
	@ --- Initialization Code ---
	LDR R0, RCC_BASE
	LDR R1, [R0, #0x14]
	LDR R2, AHBENR_GPIOAB
	ORRS R1, R1, R2
	STR R1, [R0, #0x14]

	LDR R0, GPIOA_BASE
	MOVS R1, #0b01010101
	STR R1, [R0, #0x0C]

	LDR R1, GPIOB_BASE
	LDR R2, MODER_OUTPUT
	STR R2, [R1, #0]

	MOVS R2, #0

@ --- Main Application Logic ---
main_loop:
	LDR R0, GPIOA_BASE
	LDR R1, GPIOB_BASE
	LDR R3, [R0, #0x10]		@ R3 = Button States

	@ --- Button Priority Logic ---

	@ Task 5: Check SW3 (Freeze)
	LDR R6, =SW3_PIN
	TST R3, R6
	BEQ main_loop			@ If button IS pressed (result is Zero), loop back

	@ Task 4: Check SW2 (Set pattern to 0xAA)
	LDR R6, =SW2_PIN
	TST R3, R6
	BNE check_default_count	@ If button is NOT pressed (result Not Equal to zero), skip to default count

	@ SW2 is pressed
	LDR R2, =0xAA
	B select_delay			@ Jump to delay logic

check_default_count:
	@ --- Default logic if neither SW3 nor SW2 is pressed ---

	@ Task 2: Determine increment value based on SW0
	MOVS R4, #1				@ Default increment is 1
	LDR R6, =SW0_PIN
	TST R3, R6
	BNE sw0_done			@ If SW0 is NOT pressed, branch over the next line
	MOVS R4, #2				@ If we are here, SW0 IS pressed, so set increment to 2
sw0_done:
	ADDS R2, R2, R4			@ Add increment to counter

select_delay:
	@ --- Common path for selecting the delay duration ---

	@ Task 3: Determine delay duration based on SW1
	LDR R5, LONG_DELAY_CNT	@ Default to long delay
	LDR R6, =SW1_PIN
	TST R3, R6
	BNE sw1_done			@ If SW1 is NOT pressed, branch over the next line
	LDR R5, SHORT_DELAY_CNT	@ If we are here, SW1 IS pressed, so load short delay
sw1_done:

write_leds_and_delay:
	STR R2, [R1, #0x14]		@ Write value to LEDs
	BL delay_subroutine		@ Call delay
	B main_loop

@ --- Subroutines ---
delay_subroutine:
delay_loop:
	SUBS R5, R5, #1
	BNE delay_loop
	BX LR

@ LITERALS; DO NOT EDIT
	.align
RCC_BASE: 			.word 0x40021000
AHBENR_GPIOAB: 		.word 0x00060000
GPIOA_BASE:  		.word 0x48000000
GPIOB_BASE:  		.word 0x48000400
MODER_OUTPUT: 		.word 0x00005555

LONG_DELAY_CNT: 	.word 700000
SHORT_DELAY_CNT: 	.word 300000

.equ SW0_PIN, 0b0001
.equ SW1_PIN, 0b0010
.equ SW2_PIN, 0b0100
.equ SW3_PIN, 0b1000
